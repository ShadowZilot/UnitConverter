package com.human_developing_soft.unitconverter.ui.convertingimport android.os.Bundleimport android.view.Viewimport android.widget.ArrayAdapterimport androidx.appcompat.app.AppCompatActivityimport androidx.lifecycle.ViewModelProviderimport com.human_developing_soft.unitconverter.Rimport com.human_developing_soft.unitconverter.databinding.ActivityMainBindingimport com.human_developing_soft.unitconverter.domain.StateEventListenerimport com.human_developing_soft.unitconverter.domain.StateUpdatedContentimport com.human_developing_soft.unitconverter.domain.UnitConvertingVMimport com.human_developing_soft.unitconverter.domain.UnitConvertingVMFactoryimport com.human_developing_soft.unitconverter.ui.converting.view_wrappers.ConvertingBundleManagerimport com.human_developing_soft.unitconverter.units_storage.data_loading.ContextLoadingimport com.human_developing_soft.unitconverter.units_storage.data_loading.UnitDataJSONclass MainActivity : AppCompatActivity(), StateEventListener, OverFlowEventListener {    private lateinit var mModel: UnitConvertingVM    private lateinit var mBinding: ActivityMainBinding    private lateinit var mUiManager: ConvertingBundleManager    private lateinit var mButtonManager: AddButtonManager    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        mBinding = ActivityMainBinding.inflate(layoutInflater)        setContentView(mBinding.root)        mModel = ViewModelProvider(            this,            UnitConvertingVMFactory(                this,                UnitDataJSON.Base(                    R.raw.volume_units,                    ContextLoading(baseContext)                )            )        ).get(UnitConvertingVM::class.java)        val spinnerAdapter = ArrayAdapter(            this,            android.R.layout.simple_spinner_item,            mModel.unitNames()        )        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)        mUiManager = ConvertingBundleManager.Base(            mModel        )        mButtonManager = AddButtonManager.Base(            mBinding.convertingViewList,            this,            mUiManager,            spinnerAdapter,            mBinding.addConvertingView        )    }    override fun updateState(content: StateUpdatedContent) {        mUiManager.updateState(content)    }    override fun onViewsOverflow(isOverFlow: Boolean) {        mBinding.addConvertingView.visibility = if (isOverFlow) {            View.GONE        } else {            View.VISIBLE        }    }}